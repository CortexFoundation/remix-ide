import { BaseApi } from "../base";
import { ModuleProfile, Api, API } from "../../types";
import { CompilationResult, CompilationFileSources } from "./type";
export interface ICompilerApi extends Api {
    events: {
        compilationFinished: (fileName: string, source: CompilationFileSources, languageVersion: string, data: CompilationResult) => void;
    };
    methods: {
        getCompilationResult(): CompilationResult;
    };
}
export declare const compilerProfile: ModuleProfile<ICompilerApi>;
export declare abstract class CompilerApi<T extends Api> extends BaseApi<T & ICompilerApi> implements API<ICompilerApi> {
    constructor(profile: ModuleProfile<T>);
    abstract getCompilationResult(): CompilationResult;
}
