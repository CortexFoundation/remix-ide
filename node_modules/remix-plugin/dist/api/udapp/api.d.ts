import { BaseApi } from '../base';
import { ModuleProfile, Api, API } from '../../types';
import { RemixTx, RemixTxReceipt } from './type';
export interface IUdappApi extends Api {
    events: {
        newTransaction: (transaction: RemixTx) => void;
    };
    methods: {
        sendTransaction(tx: RemixTx): RemixTxReceipt;
        getAccounts(): string[];
        createVMAccount(): string;
    };
}
export declare const udappProfile: ModuleProfile<IUdappApi>;
export declare abstract class UdappApi<T extends Api> extends BaseApi<T & IUdappApi> implements API<IUdappApi> {
    constructor(profile: ModuleProfile);
    abstract sendTransaction(tx: RemixTx): RemixTxReceipt;
    abstract getAccounts(): string[];
    abstract createVMAccount(): string;
}
