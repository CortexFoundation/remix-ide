import { Status, ModuleProfile, Api, PluginProfile, ApiEventEmitter, PluginApi, PluginRequest, API } from '../types';
export interface IBaseApi extends Api {
    events: {
        statusChanged: (status: Status) => void;
    };
    methods: {
        getStatus(): Status;
    };
}
export declare const baseProfile: ModuleProfile<IBaseApi>;
export declare abstract class BaseApi<U extends Api> implements API<IBaseApi> {
    private status;
    protected requestQueue: Array<() => Promise<any>>;
    protected currentRequest: PluginRequest;
    readonly name: U['name'];
    readonly profile: ModuleProfile<U & IBaseApi> | PluginProfile<U & IBaseApi>;
    events: ApiEventEmitter<U & IBaseApi>;
    activate?(): Promise<void>;
    deactivate?(): void;
    render?(): HTMLElement;
    constructor(profile: ModuleProfile<U> | PluginProfile<U>);
    /** Set the status of the Api */
    setStatus(status: Status): void;
    /** Get a snapshot of the status */
    getStatus(): Status;
    /** Exports an Api interface */
    api(): PluginApi<U & IBaseApi>;
}
