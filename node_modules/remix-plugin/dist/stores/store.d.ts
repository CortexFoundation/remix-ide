import { Status, ModuleProfile, Api, PluginProfile, ApiEventEmitter } from '../types';
import { ApiFactory } from 'src/engine/api-factory';
export interface State {
    status: Status;
}
export declare const StoreProfile: Partial<ModuleProfile>;
/** Create a Profile with default values */
export declare function createProfile<T extends Api, Profile extends ModuleProfile<T> | PluginProfile<T>>(profile: Profile, storeProfile: typeof StoreProfile): Profile;
export declare abstract class Store<T extends State, U extends Api> extends ApiFactory<U> {
    private initialState;
    protected storeProfile: Partial<ModuleProfile<any>>;
    protected state: T;
    readonly profile: ModuleProfile<U> | PluginProfile<U>;
    events: ApiEventEmitter<U>;
    /**
     * Create a Store that hold the state of the component
     * @param name The name of the store
     * @param initialState The initial state of the store
     */
    constructor(profile: ModuleProfile<U> | PluginProfile<U>, initialState?: T);
    /** Set the status of the Api */
    setStatus(status: Status): void;
    /**
     * Update one field of the state
     * @param state The part of the state updated
     */
    updateState(state: Partial<T>): void;
    /**
     * Get one field of the state
     * @param key A key of the state
     */
    getState(key: keyof T): T[keyof T];
    /** Reset the state its initial value */
    resetState(): void;
}
