import { Api, ModuleProfile, PluginProfile } from 'src/types';
import { State, Store } from './store';
export interface EntityState<T> extends State {
    entities: {
        [key: string]: T;
    };
    ids: string[];
    actives: string[];
}
export declare class EntityStore<T, U extends Api> extends Store<EntityState<T>, U> {
    private readonly keyId;
    protected storeProfile: Partial<ModuleProfile<any>>;
    /**
     * Create a entity Store that hold a map entity of the same model
     * @param profile The name of the store
     * @param keyId The name of the key used as a unique ID for the entity
     * @param initialState The initial state used if state is not available in `localStorage`
     */
    constructor(profile: ModuleProfile<U> | PluginProfile<U>, keyId?: string, initialState?: EntityState<T>);
    /** The entities as a Map */
    readonly entities: {
        [key: string]: T;
    };
    /** List of all the ids */
    readonly ids: string[];
    /** List of all active ID */
    readonly actives: string[];
    /** Return the length of the entity collection */
    readonly length: number;
    /** Add a new entity to the state */
    addEntity(entity: T): void;
    /** Add entities to the state */
    addEntities(entities: T[]): void;
    /**
     * Remove an entity from the state
     * @param id The id of the entity to remove
     */
    removeEntity(id: string): void;
    /** Remove all entity from the state and reset actives and ids to empty */
    clearState(): void;
    /**
     * Update one entity of the state
     * @param id The id of the entity to update
     * @param update The fields to update in the entity
     */
    updateEntity(id: string, update: Partial<T>): void;
    /**
     * Activate one or several entity from the state
     * @param ids An id or a list of id to activate
     */
    setActive(ids: string | string[]): void;
    /**
     * Deactivate one or several entity from the state
     * @param ids An id or a list of id to deactivate
     */
    removeActive(ids: string | string[]): void;
    /**
     * Get one entity
     * @param id The id of the entity to get
     */
    getOne(id: string): T;
    /**
     * Get many entities as an array
     * @param ids An array of id of entity to get
     */
    getMany(ids: string[]): T[];
    /**
     * Get all the entities as an array
     */
    getAll(): T[];
    /** Get all active entities */
    getActives(): T[];
    /**
     * Is the entity active
     * @param id The id of the entity to check
     */
    isActive(id: string): boolean;
    /**
     * Is this id inside the store
     * @param id The id of the entity to check
     */
    hasEntity(id: string): boolean;
    /** Is the state empty */
    isEmpty(): boolean;
}
