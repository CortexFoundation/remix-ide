export declare type Factory = (...deps: any[]) => any;
export declare class InjectorFactory {
    static create(name: string, deps: string[], useFactory: Factory): typeof Injector;
}
export declare class Injector {
    static entryName: string;
    static deps: string[];
    static useFactory: Factory;
    constructor(...deps: any[]);
    activate(): void;
    deactivate(): void;
}
interface ModuleConfig {
    name: string;
    deps: string[];
}
export declare function Module(config: ModuleConfig): <T extends typeof Injector>(constructor: T) => {
    new (...deps: any[]): {
        onActivate(): void;
        onDeactivate(): void;
        activate(): void;
        deactivate(): void;
    };
    entryName: string;
    deps: string[];
    useFactory: (...deps: any[]) => Injector;
} & T;
export declare class EventEmitter<T> {
    private name;
    constructor(name: string);
    emit(detail: T): void;
    on(cb: (detail: T) => void): void;
}
interface InjectorMap {
    [name: string]: Injector;
}
export declare class AppManager {
    modules: InjectorMap;
    constructor(modules: (typeof Injector)[]);
    private addModules;
}
export {};
