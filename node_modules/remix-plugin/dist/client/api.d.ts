import { PluginClient, PluginOptions } from './client';
import { ModuleProfile, Api } from '../types';
interface EventApi<T extends Api> {
    on: <event extends Extract<keyof T['events'], string>>(name: event, cb: T['events'][event]) => void;
}
declare type MethodApi<T extends Api> = {
    [m in Extract<keyof T['methods'], string>]: (...args: Parameters<T['methods'][m]>) => Promise<ReturnType<T['methods'][m]>>;
};
export declare type CustomApi<T extends Api> = EventApi<T> & MethodApi<T>;
export declare type ExtractApi<Profile, name> = Profile extends ModuleProfile<infer X> ? name extends Profile['name'] ? X : never : never;
export declare type ApiMap<M extends ModuleProfile<Api>> = {
    [name in M['name']]: CustomApi<ExtractApi<M, name>>;
};
/**
 * Create an Api
 * @param profile The profile of the api
 */
export declare function createApi<T extends Api>(client: PluginClient, profile: ModuleProfile<T>): CustomApi<T>;
/** Transform a list of profile into a map of API */
export declare function getApiMap<T extends ModuleProfile>(client: PluginClient, profiles: T[]): ApiMap<T>;
export interface Theme {
    url: string;
    quality: 'dark' | 'light';
}
/** Start listening on theme changed */
export declare function listenOnThemeChanged(client: PluginClient, options?: Partial<PluginOptions>): HTMLLinkElement;
export {};
