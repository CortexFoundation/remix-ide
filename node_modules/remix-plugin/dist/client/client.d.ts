import { EventEmitter } from 'events';
import { Api, PluginRequest, ModuleProfile } from '../types';
export interface PluginDevMode {
    port: number | string;
}
export interface PluginOptions<T extends ModuleProfile = any> {
    customTheme: boolean;
    customApi: T[];
    devMode: PluginDevMode;
}
export declare const defaultOptions: PluginOptions;
/** Throw an error if client try to send a message before connection */
export declare function handleConnectionError(devMode?: PluginDevMode): void;
/** Create the name of the event for a call */
export declare function callEvent(name: string, key: string, id: number): string;
/** Create the name of the event for a listen */
export declare function listenEvent(name: string, key: string): string;
export declare class PluginClient<T extends Api = any> {
    private loaded;
    private id;
    private loadedCB;
    events: EventEmitter;
    currentRequest: PluginRequest;
    devMode: PluginDevMode;
    constructor(options?: Partial<PluginOptions>);
    onload(cb?: () => void): Promise<void>;
    /** Make a call to another plugin */
    call(name: string, key: string, ...payload: any): Promise<any>;
    /** Listen on event from another plugin */
    on(name: string, key: string, cb: (...payload: any[]) => void): void;
    /** Expose an event for the IDE */
    emit<Key extends keyof T["events"]>(key: Key, ...payload: any[]): void;
}
