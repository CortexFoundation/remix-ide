import { Api, PluginRequest } from '../types';
export interface RemixExtensionOptions {
    useCustomBootStrapTheme: boolean;
}
export interface Theme {
    url: string;
    quality: 'dark' | 'light';
}
export declare class RemixExtension<T extends Api = any> {
    private devMode;
    private source;
    private origin;
    private notifications;
    private pendingRequests;
    private id;
    private handshake;
    protected currentRequest: PluginRequest;
    isLoaded: boolean;
    constructor(options?: RemixExtensionOptions);
    private initListenOnSwitchTheme;
    /** Manage a message coming from the parent origin */
    private getMessage;
    /** Check if the sender has the right origin */
    private checkOrigin;
    /** Send a message to source parent */
    private send;
    /**
     * Set the plugin in a developer mode which accept localhost origin
     * @param port The port of the localhost for the IDE
     */
    setDevMode(port?: number | string): void;
    /** Listen on notification events from another plugin or module */
    listen(name: string, key: string, cb: (...payload: any[]) => void): void;
    /** Call a method from another plugin or module */
    call(name: string, key: string, ...payload: any): Promise<any>;
    /** Emit an event */
    emit<Key extends keyof T['events']>(key: Key, payload: T['events'][Key]): void;
    /** Run when the handshake is done */
    loaded(): Promise<void>;
}
