import { ModuleProfile, API, Api, ApiEventEmitter, PluginApi, IPermissionHandler } from '../types';
export interface AppManager extends Api {
    name: 'appManager';
    events: {
        register: (name: string) => void;
        activate: (api: PluginApi<Api>) => void;
        deactivate: (profile: ModuleProfile) => void;
    };
    methods: {
        registerMany(entry: PluginApi<any>[]): void;
        registerMany(entry: PluginApi<any>[]): void;
        registerOne<T extends Api>(entry: PluginApi<T>): void;
        registerOne<T extends Api>(entry: PluginApi<T>): void;
        activateMany(names: string[]): void;
        deactivateMany(names: string[]): void;
        activateOne(name: string): void;
        deactivateOne(name: string): void;
    };
}
export declare abstract class AppManagerApi implements API<AppManager> {
    abstract permissionHandler: IPermissionHandler;
    private eventmanager;
    private calls;
    readonly name = "appManager";
    events: ApiEventEmitter<AppManager>;
    /** Method to implement: get a module from the state of the application */
    abstract getEntity<T extends Api>(name: string): PluginApi<T>;
    /** Method to implement: Should add the plugin or module to the state of the application */
    abstract addEntity<T extends Api>(api: PluginApi<T>): void;
    /** Method to implement: Do something when module or plugin is activated or deactivated */
    abstract setActive(name: string, isActive: boolean): void;
    /** Check if profile is a plugin */
    private isPlugin;
    /** Register many Modules or Plugins and activate them */
    init(entries: PluginApi<any>[]): void;
    /** Register many Modules or Plugins */
    registerMany(entries: PluginApi<any>[]): void;
    /** Register on Module or Plugin */
    registerOne<T extends Api>(api: PluginApi<T>): void;
    /** Activate several modules or plugins */
    activateMany(names: string[]): void;
    /** Activate a module or plugin */
    activateOne(name: string): void;
    /** Activation for Module and Plugin */
    private activateCallAndEvent;
    /** Activation for Plugin only */
    private activateRequestAndNotification;
    /** Deactivate several modules or plugins */
    deactivateMany(names: string[]): void;
    /** Deactivate a module or plugin */
    deactivateOne(name: string): void;
    /** Deactivation for modules and plugins */
    private deactivateProfile;
    /** Broadcast a message to every plugin listening */
    private broadcast;
}
