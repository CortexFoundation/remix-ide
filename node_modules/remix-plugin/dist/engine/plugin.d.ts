import { PluginProfile, Api, PluginRequest, PluginApi } from '../types';
import { BaseApi } from '../api/base';
export declare class Plugin<T extends Api> extends BaseApi<T> implements PluginApi<T> {
    private readonly listener;
    private id;
    private iframe;
    private origin;
    private source;
    private pendingRequest;
    protected requestQueue: Array<() => Promise<any>>;
    readonly name: T['name'];
    profile: PluginProfile<T>;
    notifs: {};
    request: (value: {
        name: string;
        key: string;
        payload: any;
    }) => Promise<any>;
    constructor(profile: PluginProfile<T>);
    /** Get message from the iframe */
    private getMessage;
    /**
     * Post a message to the iframe of this plugin
     * @param message The message to post
     */
    private postMessage;
    /**
     * Add a request for the plugin to the queue and execute it in time
     * @param requestInfo Information concerning the incoming request
     * @param method The name of the method to call
     * @param payload The arguments of this method
     */
    addRequest(requestInfo: PluginRequest, method: Extract<keyof T['methods'], string>, payload: any[]): Promise<any>;
    /**
     * Create and return the iframe
     */
    render(): HTMLIFrameElement;
    deactivate(): void;
}
