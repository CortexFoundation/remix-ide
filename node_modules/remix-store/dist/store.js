"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var Store = /** @class */ (function () {
    /**
     * Create a Store that hold the state of the component
     * @param name The name of the store
     * @param initialState The initial state of the store
     */
    function Store(name, initialState) {
        this.name = name;
        this.initialState = initialState;
        this.event = new events_1.EventEmitter();
        this.state = this.initialState;
    }
    Object.defineProperty(Store.prototype, "on", {
        /** Listen on event from the store */
        get: function () {
            return this.event.on;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Store.prototype, "once", {
        /** Liste once on event from the store */
        get: function () {
            return this.event.once;
        },
        enumerable: true,
        configurable: true
    });
    /** Update one field of the state */
    Store.prototype.update = function (state) {
        this.state = __assign({}, this.state, state);
    };
    /** Get one field of the state */
    Store.prototype.get = function (key) {
        return this.state[key];
    };
    /** Reset the state its initial value */
    Store.prototype.reset = function () {
        this.state = this.initialState;
    };
    /** Dispatch an event with the new state */
    Store.prototype.dispatch = function () {
        this.event.emit("newState", this.state);
    };
    return Store;
}());
exports.Store = Store;
var EntityStore = /** @class */ (function (_super) {
    __extends(EntityStore, _super);
    /**
     * Create a entity Store that hold a map entity of the same model
     * @param name The name of the store
     * @param initialState The initial state of the store
     * @param keyId The value used as a key for the `entities` and inside `ids`
     */
    function EntityStore(name, initialState, keyId) {
        var _this = _super.call(this, name, initialState) || this;
        _this.keyId = keyId;
        return _this;
    }
    Object.defineProperty(EntityStore.prototype, "entities", {
        ////////////
        // GETTER //
        ////////////
        /** Tne entities as a Map */
        get: function () {
            return this.state.entities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "ids", {
        /** List of all the ids */
        get: function () {
            return this.state.ids;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "actives", {
        /** List of all active ID */
        get: function () {
            return this.state.actives;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "length", {
        /** Return the length of the entity collection */
        get: function () {
            return this.state.ids.length;
        },
        enumerable: true,
        configurable: true
    });
    /////////////
    // SETTERS //
    /////////////
    /** Add a new entity to the state */
    EntityStore.prototype.add = function (entity) {
        var id = entity[this.keyId];
        if (typeof id !== "string") {
            throw new Error(id + " should be of type 'string', but is of type " + typeof id);
        }
        this.state.entities[id] = entity;
        this.state.ids.push(id);
    };
    /** Remove an entity from the state */
    EntityStore.prototype.remove = function (id) {
        delete this.state.entities[id];
        this.state.ids.slice(this.state.ids.indexOf(id));
        this.state.actives.slice(this.state.ids.indexOf(id));
    };
    /** Update one entity of the state */
    EntityStore.prototype.updateOne = function (id, update) {
        this.state.entities[id] = __assign({}, this.state.entities[id], update);
    };
    /** Activate one or several entity from the state */
    EntityStore.prototype.activate = function (ids) {
        Array.isArray(ids)
            ? this.state.actives.push()
            : this.state.actives.concat(ids);
        this.event.emit("activate", ids);
    };
    /** Remove one or  */
    EntityStore.prototype.deactivate = function (ids) {
        var _this = this;
        Array.isArray(ids)
            ? ids.forEach(function (id) { return _this.state.actives.slice(_this.state.ids.indexOf(id)); })
            : this.state.actives.slice(this.state.ids.indexOf(ids));
    };
    ///////////
    // QUERY //
    ///////////
    /** Get one entity */
    EntityStore.prototype.getOne = function (id) {
        return this.state.entities[id];
    };
    /** Get many entities as an array */
    EntityStore.prototype.getMany = function (ids) {
        var _this = this;
        return ids.map(function (id) { return _this.state.entities[id]; });
    };
    /** Get all the entities as an array */
    EntityStore.prototype.getAll = function () {
        var _this = this;
        return this.state.ids.map(function (id) { return _this.state.entities[id]; });
    };
    /** Get all active entities */
    EntityStore.prototype.getActives = function () {
        var _this = this;
        return this.state.actives.map(function (id) { return _this.state.entities[id]; });
    };
    ////////////////
    // CONDITIONS //
    ////////////////
    /** Is the entity active */
    EntityStore.prototype.isActive = function (id) {
        return this.state.actives.includes(id);
    };
    /** Is this id inside the store */
    EntityStore.prototype.hasEntity = function (id) {
        return this.state.ids.includes(id);
    };
    /** Is the state empty */
    EntityStore.prototype.isEmpty = function () {
        return this.state.ids.length === 0;
    };
    return EntityStore;
}(Store));
exports.EntityStore = EntityStore;
/** Store the state of the stores into LocalStorage */
function localState(stores) {
    stores.forEach(function (store) {
        var name = store.name;
        store.on("newState", function (state) {
            localStorage.setItem(name, JSON.stringify(state));
        });
    });
}
